apply plugin: 'java'
apply plugin: 'war' 
//apply plugin: 'jettyEclipse'
//apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'
apply from: 'gretty.plugin'
apply plugin: 'eclipse'
apply plugin: 'distribution'
apply plugin: 'jacoco'
apply plugin: 'jpa-schema-generate'

buildscript {
	repositories {    	
    	mavenCentral()
    	jcenter()
  	}
  	dependencies {
		// we need this to get git version info
    	classpath 'org.ajoberstar:gradle-git:0.9.0'
    	// Jetty 9+
    	//classpath (group: 'com.sahlbach.gradle', name: 'gradle-jetty-eclipse-plugin', version: '1.9.2')
    	// Generating JPA schema
    	classpath "io.github.divinespear:jpa-schema-gradle-plugin:0.1.11" 
  	}
}
 
// Initialize GIT information 
import org.ajoberstar.grgit.*
ext.repo = Grgit.open(project.file('.'))

// Custom settings...
sourceCompatibility = 1.8
war.archiveName "fim.war"
def currentVersion = "0.3"
def FIM_CI = System.getenv("CI") ?: "false"
def FIM_BUILD_NUMBER = System.getenv("BUILD_ID") ?: "unknown"
def FIM_BUILD_NUMBER_FORMATED = System.getenv("BUILD_ID") ? "." + System.getenv("BUILD_ID") : ""
def FIM_GIT_COMMIT = "${repo.head().abbreviatedId}"
def FIM_GIT_BRANCH = "${repo.branch.getCurrent().getName()}"
version = "${currentVersion}-${FIM_GIT_BRANCH}"
def manifestVersion = "${currentVersion}${FIM_BUILD_NUMBER_FORMATED}-${FIM_GIT_BRANCH}"
//jettyEclipse.contextPath = "/fim"

// This is for dependencies...
repositories {
    mavenCentral()
}
dependencies {
	providedCompile "javax.servlet:javax.servlet-api:3.1.0"
    //compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	// misc
	compile 'commons-io:commons-io:2.4'
	compile 'commons-codec:commons-codec:1.9'
	compile 'org.json:json:20141113'
	
    // logging
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:jcl-over-slf4j:1.7.7'    
    compile 'org.slf4j:jul-to-slf4j:1.7.7'    
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    // google guice
    compile 'com.google.guava:guava:14.0.1'    
    compile ('com.google.inject:guice:4.0-beta5') {
    	exclude module: 'guava'
    }
    compile ('com.google.inject.extensions:guice-servlet:4.0-beta5') {
    	exclude module: 'guava'
    }
	// persistence
	compile ('com.google.inject.extensions:guice-persist:4.0-beta5') {
    	exclude module: 'guava'
    }
	compile 'org.batoo.jpa:batoo-jpa:2.0.1.2'
	compile 'org.batoo.jpa:persistence-api:2.0'
	compile 'javax.validation:validation-api:1.1.0.Final'
	compile ('com.jolbox:bonecp:0.8.0.RELEASE') {
    	exclude module: 'guava'
    }
    // stripes
    compile ('com.silvermindsoftware.stripes:stripes-guice:3.3') {
        exclude module: 'log4j'
		exclude module: 'guava'
    }    
    compile ('net.sourceforge.stripes:stripes:1.5.8') {
        exclude module: 'log4j'
    }  
    compile 'taglibs:standard:1.1.2'
    compile 'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.1'  
    // e-mail sending
    compile 'javax.mail:mail:1.4.7'
    compile 'org.apache.velocity:velocity:1.7'
    
    // db drivers
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    compile 'mysql:mysql-connector-java:5.1.32'
    //compile 'org.jumpmind.symmetric.jdbc:mariadb-java-client:1.1.1'
    
    // db migration
    compile 'org.flywaydb:flyway-core:3.0'
    
	//joda time
	compile 'joda-time:joda-time:2.1'

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'org.apache.derby:derby:10.11.1.1'
    testCompile 'org.dbunit:dbunit:2.5.0'
    
}
task("generateJar", dependsOn: 'classes', type: Jar) {
	    from('.') {
	        include 'contributors.txt'
	    }
	    manifest {
	        attributes 'FIM_CI': FIM_CI, 'FIM_BUILD_NUMBER': FIM_BUILD_NUMBER, 'FIM_GIT_COMMIT': FIM_GIT_COMMIT, 
	        			'FIM_GIT_BRANCH': FIM_GIT_BRANCH, 
	        			'Implementation-Title': 'Free Issue Manager (fim)', 
	        			'Implementation-Version': manifestVersion, 'Created-At' : getDate()
	    } 
}
// War customization
war {
    from(libsDir) {
        include '*.jar'
        into('WEB-INF/lib')
    }
//    manifest {
//        attributes 'FIM_CI': FIM_CI, 'FIM_BUILD_NUMBER': FIM_BUILD_NUMBER, 'FIM_GIT_COMMIT': FIM_GIT_COMMIT, 
//        			'FIM_GIT_BRANCH': FIM_GIT_BRANCH, 
//        			'Implementation-Title': 'Free Issue Manager (fim)', 
//        			'Implementation-Version': manifestVersion, 'Created-At' : getDate()
//    }
	dependsOn generateJar
}

// "Cobertura task"
task("cobertura", dependsOn: 'jacocoTestReport') << {
}
build.dependsOn cobertura
task createCoberturaWar(type: Zip, dependsOn: cobertura) {
    from('build/reports/jacoco/test/html/'){
    } 
    from('etc/web-xmls/cobertura/'){
    	include 'web.xml'
        into('WEB-INF/')
    } 
    archiveName('fim-cobertura.war')
}


// javadoc settings
build.dependsOn javadoc
// Additional war files
task createJavadocWar(type: Zip, dependsOn: javadoc) {
    from('build/docs/javadoc/'){
    } 
    from('etc/web-xmls/javadoc/'){
    	include 'web.xml'
        into('WEB-INF/')
    } 
    archiveName('fim-javadoc.war')
}

// This is for creating the zip with distribution content
distributions {
    main {
        baseName = 'fim'
        contents {
            from { 'LICENSE'}
            from { 'README.md'}
            //from { 'contributors.txt'}
            from { 'build/libs/'}
            
        }
    }
}

// This is for generating the wrapper used by drone.io
// You should run it with gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

// Function that returns date formated in YYYY-MM-DD HH:MM:SS.s
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss.S')
    return formattedDate
}

// This is for uploading the distribution ZIP
configurations {
    ftpAntTask
}

dependencies {
    ftpAntTask("org.apache.ant:ant-commons-net:1.9.3") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}
// FTP settings
def FTP_SITE = "pfaalliance.1gh.in"
def FTP_USER = "u271309358"
def FTP_PASSWD = System.getenv("FIM_FTP_PASSWD") ?: "unknown"

task ftp << {
	def FIM_UPLOAD_DIR = "fim/${FIM_GIT_BRANCH}/${FIM_BUILD_NUMBER}"
	println "FIM_BUILD_NUMBER = ${FIM_BUILD_NUMBER}, FIM_UPLOAD_DIR = ${FIM_UPLOAD_DIR}"
	if (FIM_BUILD_NUMBER.equals("unknown")) {
		println 'Build number is missing, I cannot operate this way!'
	} else {
		println 'Uploading...'
		ant {
			taskdef(name: 'ftp',
					classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
					classpath: configurations.ftpAntTask.asPath)
			ftp(server: FTP_SITE, userid: FTP_USER, password: FTP_PASSWD, action: "mkdir", remotedir: "${FIM_UPLOAD_DIR}")
			ftp(server: FTP_SITE, userid: FTP_USER, password: FTP_PASSWD, action: "send",  remotedir: "${FIM_UPLOAD_DIR}", passive: "yes") {
				fileset(dir: "build/distributions")
			}
		}
	}
}

// Redefinition of jettyRun task
//task("jettyRun", dependsOn: 'appRun') << {
//}

// Generate schema from JPA entities
sourceSets {
    main {
        // set output to same directories
        // jpa implementations always scan classes using classpath that found persistence.xml
        output.resourcesDir = output.classesDir
    }
}

generateSchema {
    // default options
    // see SchemaGenerationConfig to all options
    format = 'true'
    persistenceXml = '${buildDir}/tmp/persistence/persistence.xml'
    persistenceUnitName = 'fimJpaUnit'
    //databaseAction = 'create'
    scriptAction = 'create'
    //createSourceMode = 'script'
    //createSourceFile = 'script'
    
    // if you want multiple output
    targets {
        postgres {
            //jdbcDriver = 'org.postgresql.Driver'
            databaseProductName = 'PostgreSQL'
            databaseMajorVersion = 9
        }
        mysql {
            databaseProductName = 'MySQL'
            databaseMajorVersion = 5
        }
        derby {
            databaseProductName = 'Apache Derby'
            databaseMajorVersion = 10
            databaseMinorVersion = 7
        }
    }
}




gretty {
  httpsEnabled = true
  // optionally you can specify port. 8443 is the default.
  httpsPort = 8443
  sslKeyStorePath = './etc/ssl/keystore'
  sslKeyStorePassword='33NFcgHVfXeIw3lrhY1mTaMukc0qtJsKJaNMHz6eeHlgy6ZJoxBRLNnA3UVGqY0LoNq9sqQhDEb2nA3SFi139tB8QRCWzJe8UkFEfVwLvBT18UIqqkMp3eaWr8pwptbH'
  sslKeyManagerPassword='jct30I3U4xzkm37zKSY4quNjSaFLw635Ej62dQD7oqL4pCv4oKJ736ne2H5FW3o5TYJn68OE5upLNg9rGH6rDkJ3bt9f45cXJeLF6IgmKLqPmPdtsjBVI1HMGlYklRS5'
  
  jvmArgs = ['-Dfim.log.dir=./logs']
}


// Sample to see how to define such things
test {
    systemProperties 'test': 'true'
}
