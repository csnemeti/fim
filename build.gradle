apply plugin: 'java'
//apply plugin: 'jar' 
apply plugin: 'war' 
//apply plugin: 'tomcat'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'distribution'

buildscript {
	repositories {
    	// jcenter()
    	mavenCentral()
  	}
  	dependencies {
		// we need this to get git version info
    	classpath 'org.ajoberstar:gradle-git:0.9.0'
    	// Tomcat with gradle
    	//classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
  	}
}
// Initialize GIT information 
import org.ajoberstar.grgit.*
ext.repo = Grgit.open(project.file('.'))

// Custom settings...
sourceCompatibility = 1.8
war.archiveName "fim.war"
def currentVersion = "0.1"
def FIM_CI = System.getenv("CI") ?: "false"
def FIM_BUILD_NUMBER = System.getenv("BUILD_ID") ?: "unknown"
def FIM_BUILD_NUMBER_FORMATED = System.getenv("BUILD_ID") ? "." + System.getenv("BUILD_ID") : ""
def FIM_GIT_COMMIT = "${repo.head().abbreviatedId}"
def FIM_GIT_BRANCH = "${repo.branch.getCurrent().getName()}"
version = "${currentVersion}-${FIM_GIT_BRANCH}"
def manifestVersion = "${currentVersion}${FIM_BUILD_NUMBER_FORMATED}-${FIM_GIT_BRANCH}"

// This is for dependencies...
repositories {
    mavenCentral()
}
dependencies {
    //compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'com.google.inject:guice:4.0-beta4'
    compile 'com.google.inject.extensions:guice-servlet:4.0-beta4'

	providedCompile 'javax.servlet:servlet-api:2.5'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    
    // for running tomcat
    def tomcatVersion = '7.0.47'
    //tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
    //       "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    //tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
    //    exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    //}
}

// War customization
war {
    from('.') {
        include 'contributors.txt'
        into('WEB-INF/classes')
    }
    manifest {
        attributes 'FIM_CI': FIM_CI, 'FIM_BUILD_NUMBER': FIM_BUILD_NUMBER, 'FIM_GIT_COMMIT': FIM_GIT_COMMIT, 
        			'FIM_GIT_BRANCH': FIM_GIT_BRANCH, 'Implementation-Title': 'Free Issue Manager (fim)', 
        			'Implementation-Version': manifestVersion, 'Created-At' : getDate()
    } 
}

// This is for creating the zip with distribution content
distributions {
    main {
        baseName = 'fim'
        contents {
            from { 'LICENSE'}
            from { 'README.md'}
            from { 'contributors.txt'}
            from { 'build/libs/'}
            
        }
    }
}

// This is for generating the wrapper used by drone.io
// You should run it with gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

// Function that returns date formated in YYYY-MM-DD HH:MM:SS.s
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss.S')
    return formattedDate
}





// Sample to see how to define such things
test {
    systemProperties 'property': 'value'
}
//jar {
//    manifest {
//        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
//    }
//}
