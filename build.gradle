apply plugin: 'java'
//apply plugin: 'jar' 
apply plugin: 'war' 
//apply plugin: 'tomcat'
apply plugin: 'jetty'
apply plugin: 'eclipse'
apply plugin: 'distribution'
apply plugin: 'jacoco'

buildscript {
	repositories {
    	// jcenter()
    	mavenCentral()
  	}
  	dependencies {
		// we need this to get git version info
    	classpath 'org.ajoberstar:gradle-git:0.9.0'
    	// Tomcat with gradle
    	//classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.9'
  	}
}
// Initialize GIT information 
import org.ajoberstar.grgit.*
ext.repo = Grgit.open(project.file('.'))

// Custom settings...
sourceCompatibility = 1.8
war.archiveName "fim.war"
def currentVersion = "0.1"
def FIM_CI = System.getenv("CI") ?: "false"
def FIM_BUILD_NUMBER = System.getenv("BUILD_ID") ?: "unknown"
def FIM_BUILD_NUMBER_FORMATED = System.getenv("BUILD_ID") ? "." + System.getenv("BUILD_ID") : ""
def FIM_GIT_COMMIT = "${repo.head().abbreviatedId}"
def FIM_GIT_BRANCH = "${repo.branch.getCurrent().getName()}"
version = "${currentVersion}-${FIM_GIT_BRANCH}"
def manifestVersion = "${currentVersion}${FIM_BUILD_NUMBER_FORMATED}-${FIM_GIT_BRANCH}"

// This is for dependencies...
repositories {
    mavenCentral()
}
dependencies {
	providedCompile 'javax.servlet:servlet-api:2.5'
	//providedCompile "javax.servlet:javax.servlet-api:3.+"
    //compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	// misc
	compile 'commons-io:commons-io:2.4'
    // logging
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'org.slf4j:jcl-over-slf4j:1.7.7'    
    //compile 'commons-logging:commons-logging:1.2'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    // google guice
    compile 'com.google.guava:guava:14.0.1'    
    compile ('com.google.inject:guice:4.0-beta4') {
    	exclude module: 'guava'
    }
    compile ('com.google.inject.extensions:guice-servlet:4.0-beta4') {
    	exclude module: 'guava'
    }
	// persistence
	compile ('com.google.inject.extensions:guice-persist:4.0-beta4') {
    	exclude module: 'guava'
    }
	compile 'org.batoo.jpa:batoo-jpa:2.0.1.2'
	compile 'org.batoo.jpa:persistence-api:2.0'
	compile 'javax.validation:validation-api:1.1.0.Final'
	compile ('com.jolbox:bonecp:0.8.0.RELEASE') {
    	exclude module: 'guava'
    }
    // stripes
    compile ('com.silvermindsoftware.stripes:stripes-guice:3.3') {
        exclude module: 'log4j'
    }    
    compile ('net.sourceforge.stripes:stripes:1.5.8') {
        exclude module: 'log4j'
    }    
    //  db drivers
    compile 'org.postgresql:postgresql:9.3-1102-jdbc41'
    compile 'mysql:mysql-connector-java:5.1.32'
    //compile 'org.jumpmind.symmetric.jdbc:mariadb-java-client:1.1.1'
    
    

    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile "org.mockito:mockito-all:1.9.5"
    
    // for running tomcat
    def tomcatVersion = '7.0.47'
    //tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
    //       "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    //tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
    //    exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    //}
}

// War customization
war {
    from('.') {
        include 'contributors.txt'
        into('WEB-INF/classes')
    }
    manifest {
        attributes 'FIM_CI': FIM_CI, 'FIM_BUILD_NUMBER': FIM_BUILD_NUMBER, 'FIM_GIT_COMMIT': FIM_GIT_COMMIT, 
        			'FIM_GIT_BRANCH': FIM_GIT_BRANCH, 'Implementation-Title': 'Free Issue Manager (fim)', 
        			'Implementation-Version': manifestVersion, 'Created-At' : getDate()
    } 
}

// "Cobertura task"
task("cobertura", dependsOn: 'jacocoTestReport') << {
}

// This is for creating the zip with distribution content
distributions {
    main {
        baseName = 'fim'
        contents {
            from { 'LICENSE'}
            from { 'README.md'}
            //from { 'contributors.txt'}
            from { 'build/libs/'}
            
        }
    }
}

// This is for generating the wrapper used by drone.io
// You should run it with gradle wrapper
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

// Function that returns date formated in YYYY-MM-DD HH:MM:SS.s
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd HH:mm:ss.S')
    return formattedDate
}

// This is for uploading the distribution ZIP
configurations {
    ftpAntTask
}

dependencies {
    ftpAntTask("org.apache.ant:ant-commons-net:1.9.3") {
        module("commons-net:commons-net:1.4.1") {
            dependencies "oro:oro:2.0.8:jar"
        }
    }
}
// FTP settings
def FTP_SITE = "pfaalliance.1gh.in"
def FTP_USER = "u271309358"
def FTP_PASSWD = System.getenv("FIM_FTP_PASSWD") ?: "unknown"

task ftp << {
	def FIM_UPLOAD_DIR = "fim/${FIM_GIT_BRANCH}/${FIM_BUILD_NUMBER}"
	println "FIM_BUILD_NUMBER = ${FIM_BUILD_NUMBER}, FIM_UPLOAD_DIR = ${FIM_UPLOAD_DIR}"
	if (FIM_BUILD_NUMBER.equals("unknown")) {
		println 'Build number is missing, I cannot operate this way!'
	} else {
		println 'Uploading...'
		ant {
			taskdef(name: 'ftp',
					classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
					classpath: configurations.ftpAntTask.asPath)
			ftp(server: FTP_SITE, userid: FTP_USER, password: FTP_PASSWD, action: "mkdir", remotedir: "${FIM_UPLOAD_DIR}")
			ftp(server: FTP_SITE, userid: FTP_USER, password: FTP_PASSWD, action: "send",  remotedir: "${FIM_UPLOAD_DIR}", passive: "yes") {
				fileset(dir: "build/distributions")
			}
		}
	}
}



// Sample to see how to define such things
test {
    systemProperties 'property': 'value'
}
//jar {
//    manifest {
//        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version
//    }
//}
